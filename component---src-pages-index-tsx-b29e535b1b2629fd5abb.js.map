{"version":3,"file":"component---src-pages-index-tsx-b29e535b1b2629fd5abb.js","mappings":"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","sources":["webpack://landing-page/./src/components/Feature.tsx","webpack://landing-page/./src/components/Footer.tsx","webpack://landing-page/./node_modules/react-hook-form/dist/index.esm.mjs","webpack://landing-page/./src/config/hubspot.ts","webpack://landing-page/./src/components/Form.tsx","webpack://landing-page/./src/components/Header.tsx","webpack://landing-page/./src/components/Hero.tsx","webpack://landing-page/./src/images/screenshot1.png","webpack://landing-page/./src/images/screenshot2.png","webpack://landing-page/./src/components/Screenshot.tsx","webpack://landing-page/./src/images/hero.png","webpack://landing-page/./src/images/feature1.png","webpack://landing-page/./src/images/feature2.png","webpack://landing-page/./src/images/feature3.png","webpack://landing-page/./src/pages/index.tsx"],"sourcesContent":["import React from \"react\";\r\n\r\ninterface Props {\r\n  headline: string;\r\n  sentence: string;\r\n  image: string;\r\n}\r\n\r\nconst Feature: React.FC<Props> = ({headline, sentence, image}) => {\r\n  return (\r\n    <div className=\"flex flex-col flex-1 min-w-[320px] mx-2 my-2 p-4 bg-white rounded-lg shadow-lg\">\r\n      <div className=\"text-lg font-bold\">{headline}</div>\r\n      <div className=\"text-base mt-4\">{sentence}</div>\r\n      <div className=\"flex justify-center items-end w-full h-full mt-4\">\r\n        <img src={image} className=\"object-contain h-full w-full max-h-48 p-4 bg-gray-100\"/>\r\n      </div>\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default Feature;","import React from \"react\";\r\n\r\nconst Footer: React.FC = () => {\r\n  return (\r\n    <div className=\"flex flex-row justify-center items-center h-16 mx-2 mt-32\">\r\n      <div className=\"text-base\">本サービスはまだ製品化されていません。仕様が変更される場合や、リリースされない場合があります。</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;","import React from 'react';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nvar isDateObject = (value) => value instanceof Date;\n\nvar isNullOrUndefined = (value) => value == null;\n\nconst isObjectType = (value) => typeof value === 'object';\r\nvar isObject = (value) => !isNullOrUndefined(value) &&\r\n    !Array.isArray(value) &&\r\n    isObjectType(value) &&\r\n    !isDateObject(value);\n\nvar getEventValue = (event) => isObject(event) && event.target\r\n    ? isCheckBoxInput(event.target)\r\n        ? event.target.checked\r\n        : event.target.value\r\n    : event;\n\nvar getNodeParentName = (name) => name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n\nvar isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));\n\nvar compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];\n\nvar isUndefined = (val) => val === undefined;\n\nvar get = (obj, path, defaultValue) => {\r\n    if (!path || !isObject(obj)) {\r\n        return defaultValue;\r\n    }\r\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], obj);\r\n    return isUndefined(result) || result === obj\r\n        ? isUndefined(obj[path])\r\n            ? defaultValue\r\n            : obj[path]\r\n        : result;\r\n};\n\nconst EVENTS = {\r\n    BLUR: 'blur',\r\n    FOCUS_OUT: 'focusout',\r\n    CHANGE: 'change',\r\n};\r\nconst VALIDATION_MODE = {\r\n    onBlur: 'onBlur',\r\n    onChange: 'onChange',\r\n    onSubmit: 'onSubmit',\r\n    onTouched: 'onTouched',\r\n    all: 'all',\r\n};\r\nconst INPUT_VALIDATION_RULES = {\r\n    max: 'max',\r\n    min: 'min',\r\n    maxLength: 'maxLength',\r\n    minLength: 'minLength',\r\n    pattern: 'pattern',\r\n    required: 'required',\r\n    validate: 'validate',\r\n};\n\nconst HookFormContext = React.createContext(null);\r\n/**\r\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\r\n *\r\n * @returns return all useForm methods\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const methods = useForm();\r\n *   const onSubmit = data => console.log(data);\r\n *\r\n *   return (\r\n *     <FormProvider {...methods} >\r\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\r\n *         <NestedInput />\r\n *         <input type=\"submit\" />\r\n *       </form>\r\n *     </FormProvider>\r\n *   );\r\n * }\r\n *\r\n *  function NestedInput() {\r\n *   const { register } = useFormContext(); // retrieve all hook methods\r\n *   return <input {...register(\"test\")} />;\r\n * }\r\n * ```\r\n */\r\nconst useFormContext = () => React.useContext(HookFormContext);\r\n/**\r\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\r\n *\r\n * @param props - all useFrom methods\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const methods = useForm();\r\n *   const onSubmit = data => console.log(data);\r\n *\r\n *   return (\r\n *     <FormProvider {...methods} >\r\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\r\n *         <NestedInput />\r\n *         <input type=\"submit\" />\r\n *       </form>\r\n *     </FormProvider>\r\n *   );\r\n * }\r\n *\r\n *  function NestedInput() {\r\n *   const { register } = useFormContext(); // retrieve all hook methods\r\n *   return <input {...register(\"test\")} />;\r\n * }\r\n * ```\r\n */\r\nconst FormProvider = (props) => {\r\n    const { children, ...data } = props;\r\n    return (React.createElement(HookFormContext.Provider, { value: data }, children));\r\n};\n\nvar getProxyFormState = (formState, control, localProxyFormState, isRoot = true) => {\r\n    const result = {\r\n        defaultValues: control._defaultValues,\r\n    };\r\n    for (const key in formState) {\r\n        Object.defineProperty(result, key, {\r\n            get: () => {\r\n                const _key = key;\r\n                if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {\r\n                    control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\r\n                }\r\n                localProxyFormState && (localProxyFormState[_key] = true);\r\n                return formState[_key];\r\n            },\r\n        });\r\n    }\r\n    return result;\r\n};\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar shouldRenderFormState = (formStateData, _proxyFormState, updateFormState, isRoot) => {\r\n    updateFormState(formStateData);\r\n    const { name, ...formState } = formStateData;\r\n    return (isEmptyObject(formState) ||\r\n        Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\r\n        Object.keys(formState).find((key) => _proxyFormState[key] ===\r\n            (!isRoot || VALIDATION_MODE.all)));\r\n};\n\nvar convertToArrayPayload = (value) => (Array.isArray(value) ? value : [value]);\n\nvar shouldSubscribeByName = (name, signalName, exact) => exact && signalName\r\n    ? name === signalName\r\n    : !name ||\r\n        !signalName ||\r\n        name === signalName ||\r\n        convertToArrayPayload(name).some((currentName) => currentName &&\r\n            (currentName.startsWith(signalName) ||\r\n                signalName.startsWith(currentName)));\n\nfunction useSubscribe(props) {\r\n    const _props = React.useRef(props);\r\n    _props.current = props;\r\n    React.useEffect(() => {\r\n        const subscription = !props.disabled &&\r\n            _props.current.subject.subscribe({\r\n                next: _props.current.next,\r\n            });\r\n        return () => {\r\n            subscription && subscription.unsubscribe();\r\n        };\r\n    }, [props.disabled]);\r\n}\n\n/**\r\n * This custom hook allows you to subscribe to each form state, and isolate the re-render at the custom hook level. It has its scope in terms of form state subscription, so it would not affect other useFormState and useForm. Using this hook can reduce the re-render impact on large and complex form application.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useformstate) • [Demo](https://codesandbox.io/s/useformstate-75xly)\r\n *\r\n * @param props - include options on specify fields to subscribe. {@link UseFormStateReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { register, handleSubmit, control } = useForm({\r\n *     defaultValues: {\r\n *     firstName: \"firstName\"\r\n *   }});\r\n *   const { dirtyFields } = useFormState({\r\n *     control\r\n *   });\r\n *   const onSubmit = (data) => console.log(data);\r\n *\r\n *   return (\r\n *     <form onSubmit={handleSubmit(onSubmit)}>\r\n *       <input {...register(\"firstName\")} placeholder=\"First Name\" />\r\n *       {dirtyFields.firstName && <p>Field is dirty.</p>}\r\n *       <input type=\"submit\" />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useFormState(props) {\r\n    const methods = useFormContext();\r\n    const { control = methods.control, disabled, name, exact } = props || {};\r\n    const [formState, updateFormState] = React.useState(control._formState);\r\n    const _mounted = React.useRef(true);\r\n    const _localProxyFormState = React.useRef({\r\n        isDirty: false,\r\n        isLoading: false,\r\n        dirtyFields: false,\r\n        touchedFields: false,\r\n        isValidating: false,\r\n        isValid: false,\r\n        errors: false,\r\n    });\r\n    const _name = React.useRef(name);\r\n    _name.current = name;\r\n    useSubscribe({\r\n        disabled,\r\n        next: (value) => _mounted.current &&\r\n            shouldSubscribeByName(_name.current, value.name, exact) &&\r\n            shouldRenderFormState(value, _localProxyFormState.current, control._updateFormState) &&\r\n            updateFormState({\r\n                ...control._formState,\r\n                ...value,\r\n            }),\r\n        subject: control._subjects.state,\r\n    });\r\n    React.useEffect(() => {\r\n        _mounted.current = true;\r\n        const isDirty = control._proxyFormState.isDirty && control._getDirty();\r\n        if (isDirty !== control._formState.isDirty) {\r\n            control._subjects.state.next({\r\n                isDirty,\r\n            });\r\n        }\r\n        _localProxyFormState.current.isValid && control._updateValid(true);\r\n        return () => {\r\n            _mounted.current = false;\r\n        };\r\n    }, [control]);\r\n    return getProxyFormState(formState, control, _localProxyFormState.current, false);\r\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar generateWatchOutput = (names, _names, formValues, isGlobal, defaultValue) => {\r\n    if (isString(names)) {\r\n        isGlobal && _names.watch.add(names);\r\n        return get(formValues, names, defaultValue);\r\n    }\r\n    if (Array.isArray(names)) {\r\n        return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)));\r\n    }\r\n    isGlobal && (_names.watchAll = true);\r\n    return formValues;\r\n};\n\nvar isPlainObject = (tempObject) => {\r\n    const prototypeCopy = tempObject.constructor && tempObject.constructor.prototype;\r\n    return (isObject(prototypeCopy) && prototypeCopy.hasOwnProperty('isPrototypeOf'));\r\n};\n\nvar isWeb = typeof window !== 'undefined' &&\r\n    typeof window.HTMLElement !== 'undefined' &&\r\n    typeof document !== 'undefined';\n\nfunction cloneObject(data) {\r\n    let copy;\r\n    const isArray = Array.isArray(data);\r\n    if (data instanceof Date) {\r\n        copy = new Date(data);\r\n    }\r\n    else if (data instanceof Set) {\r\n        copy = new Set(data);\r\n    }\r\n    else if (!(isWeb && (data instanceof Blob || data instanceof FileList)) &&\r\n        (isArray || isObject(data))) {\r\n        copy = isArray ? [] : {};\r\n        if (!Array.isArray(data) && !isPlainObject(data)) {\r\n            copy = data;\r\n        }\r\n        else {\r\n            for (const key in data) {\r\n                copy[key] = cloneObject(data[key]);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        return data;\r\n    }\r\n    return copy;\r\n}\n\n/**\r\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\r\n *\r\n * @remarks\r\n *\r\n * [API](https://react-hook-form.com/api/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\r\n *\r\n * @example\r\n * ```tsx\r\n * const { watch } = useForm();\r\n * const values = useWatch({\r\n *   name: \"fieldName\"\r\n *   control,\r\n * })\r\n * ```\r\n */\r\nfunction useWatch(props) {\r\n    const methods = useFormContext();\r\n    const { control = methods.control, name, defaultValue, disabled, exact, } = props || {};\r\n    const _name = React.useRef(name);\r\n    _name.current = name;\r\n    useSubscribe({\r\n        disabled,\r\n        subject: control._subjects.watch,\r\n        next: (formState) => {\r\n            if (shouldSubscribeByName(_name.current, formState.name, exact)) {\r\n                updateValue(cloneObject(generateWatchOutput(_name.current, control._names, formState.values || control._formValues, false, defaultValue)));\r\n            }\r\n        },\r\n    });\r\n    const [value, updateValue] = React.useState(control._getWatch(name, defaultValue));\r\n    React.useEffect(() => control._removeUnmounted());\r\n    return value;\r\n}\n\n/**\r\n * Custom hook to work with controlled component, this function provide you with both form and field level state. Re-render is isolated at the hook level.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/usecontroller) • [Demo](https://codesandbox.io/s/usecontroller-0o8px)\r\n *\r\n * @param props - the path name to the form field value, and validation rules.\r\n *\r\n * @returns field properties, field and form state. {@link UseControllerReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function Input(props) {\r\n *   const { field, fieldState, formState } = useController(props);\r\n *   return (\r\n *     <div>\r\n *       <input {...field} placeholder={props.name} />\r\n *       <p>{fieldState.isTouched && \"Touched\"}</p>\r\n *       <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\r\n *     </div>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useController(props) {\r\n    const methods = useFormContext();\r\n    const { name, control = methods.control, shouldUnregister } = props;\r\n    const isArrayField = isNameInFieldArray(control._names.array, name);\r\n    const value = useWatch({\r\n        control,\r\n        name,\r\n        defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),\r\n        exact: true,\r\n    });\r\n    const formState = useFormState({\r\n        control,\r\n        name,\r\n    });\r\n    const _registerProps = React.useRef(control.register(name, {\r\n        ...props.rules,\r\n        value,\r\n    }));\r\n    React.useEffect(() => {\r\n        const updateMounted = (name, value) => {\r\n            const field = get(control._fields, name);\r\n            if (field) {\r\n                field._f.mount = value;\r\n            }\r\n        };\r\n        updateMounted(name, true);\r\n        return () => {\r\n            const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\r\n            (isArrayField\r\n                ? _shouldUnregisterField && !control._stateFlags.action\r\n                : _shouldUnregisterField)\r\n                ? control.unregister(name)\r\n                : updateMounted(name, false);\r\n        };\r\n    }, [name, control, isArrayField, shouldUnregister]);\r\n    return {\r\n        field: {\r\n            name,\r\n            value,\r\n            onChange: React.useCallback((event) => _registerProps.current.onChange({\r\n                target: {\r\n                    value: getEventValue(event),\r\n                    name: name,\r\n                },\r\n                type: EVENTS.CHANGE,\r\n            }), [name]),\r\n            onBlur: React.useCallback(() => _registerProps.current.onBlur({\r\n                target: {\r\n                    value: get(control._formValues, name),\r\n                    name: name,\r\n                },\r\n                type: EVENTS.BLUR,\r\n            }), [name, control]),\r\n            ref: (elm) => {\r\n                const field = get(control._fields, name);\r\n                if (field && elm) {\r\n                    field._f.ref = {\r\n                        focus: () => elm.focus(),\r\n                        select: () => elm.select(),\r\n                        setCustomValidity: (message) => elm.setCustomValidity(message),\r\n                        reportValidity: () => elm.reportValidity(),\r\n                    };\r\n                }\r\n            },\r\n        },\r\n        formState,\r\n        fieldState: Object.defineProperties({}, {\r\n            invalid: {\r\n                enumerable: true,\r\n                get: () => !!get(formState.errors, name),\r\n            },\r\n            isDirty: {\r\n                enumerable: true,\r\n                get: () => !!get(formState.dirtyFields, name),\r\n            },\r\n            isTouched: {\r\n                enumerable: true,\r\n                get: () => !!get(formState.touchedFields, name),\r\n            },\r\n            error: {\r\n                enumerable: true,\r\n                get: () => get(formState.errors, name),\r\n            },\r\n        }),\r\n    };\r\n}\n\n/**\r\n * Component based on `useController` hook to work with controlled component.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)\r\n *\r\n * @param props - the path name to the form field value, and validation rules.\r\n *\r\n * @returns provide field handler functions, field and form state.\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { control } = useForm<FormValues>({\r\n *     defaultValues: {\r\n *       test: \"\"\r\n *     }\r\n *   });\r\n *\r\n *   return (\r\n *     <form>\r\n *       <Controller\r\n *         control={control}\r\n *         name=\"test\"\r\n *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (\r\n *           <>\r\n *             <input\r\n *               onChange={onChange} // send value to hook form\r\n *               onBlur={onBlur} // notify when input is touched\r\n *               value={value} // return updated value\r\n *               ref={ref} // set ref for focus management\r\n *             />\r\n *             <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\r\n *             <p>{fieldState.isTouched ? \"touched\" : \"\"}</p>\r\n *           </>\r\n *         )}\r\n *       />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nconst Controller = (props) => props.render(useController(props));\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria\r\n    ? {\r\n        ...errors[name],\r\n        types: {\r\n            ...(errors[name] && errors[name].types ? errors[name].types : {}),\r\n            [type]: message || true,\r\n        },\r\n    }\r\n    : {};\n\nvar isKey = (value) => /^\\w*$/.test(value);\n\nvar stringToPath = (input) => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nfunction set(object, path, value) {\r\n    let index = -1;\r\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\r\n    const length = tempPath.length;\r\n    const lastIndex = length - 1;\r\n    while (++index < length) {\r\n        const key = tempPath[index];\r\n        let newValue = value;\r\n        if (index !== lastIndex) {\r\n            const objValue = object[key];\r\n            newValue =\r\n                isObject(objValue) || Array.isArray(objValue)\r\n                    ? objValue\r\n                    : !isNaN(+tempPath[index + 1])\r\n                        ? []\r\n                        : {};\r\n        }\r\n        object[key] = newValue;\r\n        object = object[key];\r\n    }\r\n    return object;\r\n}\n\nconst focusFieldBy = (fields, callback, fieldsNames) => {\r\n    for (const key of fieldsNames || Object.keys(fields)) {\r\n        const field = get(fields, key);\r\n        if (field) {\r\n            const { _f, ...currentField } = field;\r\n            if (_f && callback(_f.name)) {\r\n                if (_f.ref.focus) {\r\n                    _f.ref.focus();\r\n                    break;\r\n                }\r\n                else if (_f.refs && _f.refs[0].focus) {\r\n                    _f.refs[0].focus();\r\n                    break;\r\n                }\r\n            }\r\n            else if (isObject(currentField)) {\r\n                focusFieldBy(currentField, callback);\r\n            }\r\n        }\r\n    }\r\n};\n\nvar generateId = () => {\r\n    const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\r\n        const r = (Math.random() * 16 + d) % 16 | 0;\r\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\r\n    });\r\n};\n\nvar getFocusFieldName = (name, index, options = {}) => options.shouldFocus || isUndefined(options.shouldFocus)\r\n    ? options.focusName ||\r\n        `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\r\n    : '';\n\nvar getValidationModes = (mode) => ({\r\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\r\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\r\n    isOnChange: mode === VALIDATION_MODE.onChange,\r\n    isOnAll: mode === VALIDATION_MODE.all,\r\n    isOnTouch: mode === VALIDATION_MODE.onTouched,\r\n});\n\nvar isWatched = (name, _names, isBlurEvent) => !isBlurEvent &&\r\n    (_names.watchAll ||\r\n        _names.watch.has(name) ||\r\n        [..._names.watch].some((watchName) => name.startsWith(watchName) &&\r\n            /^\\.\\w+/.test(name.slice(watchName.length))));\n\nvar updateFieldArrayRootError = (errors, error, name) => {\r\n    const fieldArrayErrors = compact(get(errors, name));\r\n    set(fieldArrayErrors, 'root', error[name]);\r\n    set(errors, name, fieldArrayErrors);\r\n    return errors;\r\n};\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isHTMLElement = (value) => {\r\n    if (!isWeb) {\r\n        return false;\r\n    }\r\n    const owner = value ? value.ownerDocument : 0;\r\n    return (value instanceof\r\n        (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement));\r\n};\n\nvar isMessage = (value) => isString(value) || React.isValidElement(value);\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isRegex = (value) => value instanceof RegExp;\n\nconst defaultResult = {\r\n    value: false,\r\n    isValid: false,\r\n};\r\nconst validResult = { value: true, isValid: true };\r\nvar getCheckboxValue = (options) => {\r\n    if (Array.isArray(options)) {\r\n        if (options.length > 1) {\r\n            const values = options\r\n                .filter((option) => option && option.checked && !option.disabled)\r\n                .map((option) => option.value);\r\n            return { value: values, isValid: !!values.length };\r\n        }\r\n        return options[0].checked && !options[0].disabled\r\n            ? // @ts-expect-error expected to work in the browser\r\n                options[0].attributes && !isUndefined(options[0].attributes.value)\r\n                    ? isUndefined(options[0].value) || options[0].value === ''\r\n                        ? validResult\r\n                        : { value: options[0].value, isValid: true }\r\n                    : validResult\r\n            : defaultResult;\r\n    }\r\n    return defaultResult;\r\n};\n\nconst defaultReturn = {\r\n    isValid: false,\r\n    value: null,\r\n};\r\nvar getRadioValue = (options) => Array.isArray(options)\r\n    ? options.reduce((previous, option) => option && option.checked && !option.disabled\r\n        ? {\r\n            isValid: true,\r\n            value: option.value,\r\n        }\r\n        : previous, defaultReturn)\r\n    : defaultReturn;\n\nfunction getValidateError(result, ref, type = 'validate') {\r\n    if (isMessage(result) ||\r\n        (Array.isArray(result) && result.every(isMessage)) ||\r\n        (isBoolean(result) && !result)) {\r\n        return {\r\n            type,\r\n            message: isMessage(result) ? result : '',\r\n            ref,\r\n        };\r\n    }\r\n}\n\nvar getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)\r\n    ? validationData\r\n    : {\r\n        value: validationData,\r\n        message: '',\r\n    };\n\nvar validateField = async (field, formValues, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {\r\n    const { ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, disabled, } = field._f;\r\n    const inputValue = get(formValues, name);\r\n    if (!mount || disabled) {\r\n        return {};\r\n    }\r\n    const inputRef = refs ? refs[0] : ref;\r\n    const setCustomValidity = (message) => {\r\n        if (shouldUseNativeValidation && inputRef.reportValidity) {\r\n            inputRef.setCustomValidity(isBoolean(message) ? '' : message || '');\r\n            inputRef.reportValidity();\r\n        }\r\n    };\r\n    const error = {};\r\n    const isRadio = isRadioInput(ref);\r\n    const isCheckBox = isCheckBoxInput(ref);\r\n    const isRadioOrCheckbox = isRadio || isCheckBox;\r\n    const isEmpty = ((valueAsNumber || isFileInput(ref)) &&\r\n        isUndefined(ref.value) &&\r\n        isUndefined(inputValue)) ||\r\n        (isHTMLElement(ref) && ref.value === '') ||\r\n        inputValue === '' ||\r\n        (Array.isArray(inputValue) && !inputValue.length);\r\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\r\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\r\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\r\n        error[name] = {\r\n            type: exceedMax ? maxType : minType,\r\n            message,\r\n            ref,\r\n            ...appendErrorsCurry(exceedMax ? maxType : minType, message),\r\n        };\r\n    };\r\n    if (isFieldArray\r\n        ? !Array.isArray(inputValue) || !inputValue.length\r\n        : required &&\r\n            ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\r\n                (isBoolean(inputValue) && !inputValue) ||\r\n                (isCheckBox && !getCheckboxValue(refs).isValid) ||\r\n                (isRadio && !getRadioValue(refs).isValid))) {\r\n        const { value, message } = isMessage(required)\r\n            ? { value: !!required, message: required }\r\n            : getValueAndMessage(required);\r\n        if (value) {\r\n            error[name] = {\r\n                type: INPUT_VALIDATION_RULES.required,\r\n                message,\r\n                ref: inputRef,\r\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\r\n            };\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\r\n        let exceedMax;\r\n        let exceedMin;\r\n        const maxOutput = getValueAndMessage(max);\r\n        const minOutput = getValueAndMessage(min);\r\n        if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {\r\n            const valueNumber = ref.valueAsNumber ||\r\n                (inputValue ? +inputValue : inputValue);\r\n            if (!isNullOrUndefined(maxOutput.value)) {\r\n                exceedMax = valueNumber > maxOutput.value;\r\n            }\r\n            if (!isNullOrUndefined(minOutput.value)) {\r\n                exceedMin = valueNumber < minOutput.value;\r\n            }\r\n        }\r\n        else {\r\n            const valueDate = ref.valueAsDate || new Date(inputValue);\r\n            const convertTimeToDate = (time) => new Date(new Date().toDateString() + ' ' + time);\r\n            const isTime = ref.type == 'time';\r\n            const isWeek = ref.type == 'week';\r\n            if (isString(maxOutput.value) && inputValue) {\r\n                exceedMax = isTime\r\n                    ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value)\r\n                    : isWeek\r\n                        ? inputValue > maxOutput.value\r\n                        : valueDate > new Date(maxOutput.value);\r\n            }\r\n            if (isString(minOutput.value) && inputValue) {\r\n                exceedMin = isTime\r\n                    ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value)\r\n                    : isWeek\r\n                        ? inputValue < minOutput.value\r\n                        : valueDate < new Date(minOutput.value);\r\n            }\r\n        }\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(error[name].message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if ((maxLength || minLength) &&\r\n        !isEmpty &&\r\n        (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))) {\r\n        const maxLengthOutput = getValueAndMessage(maxLength);\r\n        const minLengthOutput = getValueAndMessage(minLength);\r\n        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&\r\n            inputValue.length > maxLengthOutput.value;\r\n        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&\r\n            inputValue.length < minLengthOutput.value;\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(error[name].message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (pattern && !isEmpty && isString(inputValue)) {\r\n        const { value: patternValue, message } = getValueAndMessage(pattern);\r\n        if (isRegex(patternValue) && !inputValue.match(patternValue)) {\r\n            error[name] = {\r\n                type: INPUT_VALIDATION_RULES.pattern,\r\n                message,\r\n                ref,\r\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\r\n            };\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (validate) {\r\n        if (isFunction(validate)) {\r\n            const result = await validate(inputValue, formValues);\r\n            const validateError = getValidateError(result, inputRef);\r\n            if (validateError) {\r\n                error[name] = {\r\n                    ...validateError,\r\n                    ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message),\r\n                };\r\n                if (!validateAllFieldCriteria) {\r\n                    setCustomValidity(validateError.message);\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n        else if (isObject(validate)) {\r\n            let validationResult = {};\r\n            for (const key in validate) {\r\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\r\n                    break;\r\n                }\r\n                const validateError = getValidateError(await validate[key](inputValue, formValues), inputRef, key);\r\n                if (validateError) {\r\n                    validationResult = {\r\n                        ...validateError,\r\n                        ...appendErrorsCurry(key, validateError.message),\r\n                    };\r\n                    setCustomValidity(validateError.message);\r\n                    if (validateAllFieldCriteria) {\r\n                        error[name] = validationResult;\r\n                    }\r\n                }\r\n            }\r\n            if (!isEmptyObject(validationResult)) {\r\n                error[name] = {\r\n                    ref: inputRef,\r\n                    ...validationResult,\r\n                };\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    setCustomValidity(true);\r\n    return error;\r\n};\n\nfunction append(data, value) {\r\n    return [...data, ...convertToArrayPayload(value)];\r\n}\n\nvar fillEmptyArray = (value) => Array.isArray(value) ? value.map(() => undefined) : undefined;\n\nfunction insert(data, index, value) {\r\n    return [\r\n        ...data.slice(0, index),\r\n        ...convertToArrayPayload(value),\r\n        ...data.slice(index),\r\n    ];\r\n}\n\nvar moveArrayAt = (data, from, to) => {\r\n    if (!Array.isArray(data)) {\r\n        return [];\r\n    }\r\n    if (isUndefined(data[to])) {\r\n        data[to] = undefined;\r\n    }\r\n    data.splice(to, 0, data.splice(from, 1)[0]);\r\n    return data;\r\n};\n\nfunction prepend(data, value) {\r\n    return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\r\n}\n\nfunction removeAtIndexes(data, indexes) {\r\n    let i = 0;\r\n    const temp = [...data];\r\n    for (const index of indexes) {\r\n        temp.splice(index - i, 1);\r\n        i++;\r\n    }\r\n    return compact(temp).length ? temp : [];\r\n}\r\nvar removeArrayAt = (data, index) => isUndefined(index)\r\n    ? []\r\n    : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\n\nvar swapArrayAt = (data, indexA, indexB) => {\r\n    data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\r\n};\n\nfunction baseGet(object, updatePath) {\r\n    const length = updatePath.slice(0, -1).length;\r\n    let index = 0;\r\n    while (index < length) {\r\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\r\n    }\r\n    return object;\r\n}\r\nfunction isEmptyArray(obj) {\r\n    for (const key in obj) {\r\n        if (!isUndefined(obj[key])) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction unset(object, path) {\r\n    const paths = Array.isArray(path)\r\n        ? path\r\n        : isKey(path)\r\n            ? [path]\r\n            : stringToPath(path);\r\n    const childObject = paths.length === 1 ? object : baseGet(object, paths);\r\n    const index = paths.length - 1;\r\n    const key = paths[index];\r\n    if (childObject) {\r\n        delete childObject[key];\r\n    }\r\n    if (index !== 0 &&\r\n        ((isObject(childObject) && isEmptyObject(childObject)) ||\r\n            (Array.isArray(childObject) && isEmptyArray(childObject)))) {\r\n        unset(object, paths.slice(0, -1));\r\n    }\r\n    return object;\r\n}\n\nvar updateAt = (fieldValues, index, value) => {\r\n    fieldValues[index] = value;\r\n    return fieldValues;\r\n};\n\n/**\r\n * A custom hook that exposes convenient methods to perform operations with a list of dynamic inputs that need to be appended, updated, removed etc. • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn) • [Video](https://youtu.be/4MrbfGSFY2A)\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/usefieldarray) • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn)\r\n *\r\n * @param props - useFieldArray props\r\n *\r\n * @returns methods - functions to manipulate with the Field Arrays (dynamic inputs) {@link UseFieldArrayReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { register, control, handleSubmit, reset, trigger, setError } = useForm({\r\n *     defaultValues: {\r\n *       test: []\r\n *     }\r\n *   });\r\n *   const { fields, append } = useFieldArray({\r\n *     control,\r\n *     name: \"test\"\r\n *   });\r\n *\r\n *   return (\r\n *     <form onSubmit={handleSubmit(data => console.log(data))}>\r\n *       {fields.map((item, index) => (\r\n *          <input key={item.id} {...register(`test.${index}.firstName`)}  />\r\n *       ))}\r\n *       <button type=\"button\" onClick={() => append({ firstName: \"bill\" })}>\r\n *         append\r\n *       </button>\r\n *       <input type=\"submit\" />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useFieldArray(props) {\r\n    const methods = useFormContext();\r\n    const { control = methods.control, name, keyName = 'id', shouldUnregister, } = props;\r\n    const [fields, setFields] = React.useState(control._getFieldArray(name));\r\n    const ids = React.useRef(control._getFieldArray(name).map(generateId));\r\n    const _fieldIds = React.useRef(fields);\r\n    const _name = React.useRef(name);\r\n    const _actioned = React.useRef(false);\r\n    _name.current = name;\r\n    _fieldIds.current = fields;\r\n    control._names.array.add(name);\r\n    props.rules &&\r\n        control.register(name, props.rules);\r\n    useSubscribe({\r\n        next: ({ values, name: fieldArrayName, }) => {\r\n            if (fieldArrayName === _name.current || !fieldArrayName) {\r\n                const fieldValues = get(values, _name.current);\r\n                if (Array.isArray(fieldValues)) {\r\n                    setFields(fieldValues);\r\n                    ids.current = fieldValues.map(generateId);\r\n                }\r\n            }\r\n        },\r\n        subject: control._subjects.array,\r\n    });\r\n    const updateValues = React.useCallback((updatedFieldArrayValues) => {\r\n        _actioned.current = true;\r\n        control._updateFieldArray(name, updatedFieldArrayValues);\r\n    }, [control, name]);\r\n    const append$1 = (value, options) => {\r\n        const appendValue = convertToArrayPayload(cloneObject(value));\r\n        const updatedFieldArrayValues = append(control._getFieldArray(name), appendValue);\r\n        control._names.focus = getFocusFieldName(name, updatedFieldArrayValues.length - 1, options);\r\n        ids.current = append(ids.current, appendValue.map(generateId));\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, append, {\r\n            argA: fillEmptyArray(value),\r\n        });\r\n    };\r\n    const prepend$1 = (value, options) => {\r\n        const prependValue = convertToArrayPayload(cloneObject(value));\r\n        const updatedFieldArrayValues = prepend(control._getFieldArray(name), prependValue);\r\n        control._names.focus = getFocusFieldName(name, 0, options);\r\n        ids.current = prepend(ids.current, prependValue.map(generateId));\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, prepend, {\r\n            argA: fillEmptyArray(value),\r\n        });\r\n    };\r\n    const remove = (index) => {\r\n        const updatedFieldArrayValues = removeArrayAt(control._getFieldArray(name), index);\r\n        ids.current = removeArrayAt(ids.current, index);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\r\n            argA: index,\r\n        });\r\n    };\r\n    const insert$1 = (index, value, options) => {\r\n        const insertValue = convertToArrayPayload(cloneObject(value));\r\n        const updatedFieldArrayValues = insert(control._getFieldArray(name), index, insertValue);\r\n        control._names.focus = getFocusFieldName(name, index, options);\r\n        ids.current = insert(ids.current, index, insertValue.map(generateId));\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, insert, {\r\n            argA: index,\r\n            argB: fillEmptyArray(value),\r\n        });\r\n    };\r\n    const swap = (indexA, indexB) => {\r\n        const updatedFieldArrayValues = control._getFieldArray(name);\r\n        swapArrayAt(updatedFieldArrayValues, indexA, indexB);\r\n        swapArrayAt(ids.current, indexA, indexB);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, swapArrayAt, {\r\n            argA: indexA,\r\n            argB: indexB,\r\n        }, false);\r\n    };\r\n    const move = (from, to) => {\r\n        const updatedFieldArrayValues = control._getFieldArray(name);\r\n        moveArrayAt(updatedFieldArrayValues, from, to);\r\n        moveArrayAt(ids.current, from, to);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, moveArrayAt, {\r\n            argA: from,\r\n            argB: to,\r\n        }, false);\r\n    };\r\n    const update = (index, value) => {\r\n        const updateValue = cloneObject(value);\r\n        const updatedFieldArrayValues = updateAt(control._getFieldArray(name), index, updateValue);\r\n        ids.current = [...updatedFieldArrayValues].map((item, i) => !item || i === index ? generateId() : ids.current[i]);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields([...updatedFieldArrayValues]);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, updateAt, {\r\n            argA: index,\r\n            argB: updateValue,\r\n        }, true, false);\r\n    };\r\n    const replace = (value) => {\r\n        const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\r\n        ids.current = updatedFieldArrayValues.map(generateId);\r\n        updateValues([...updatedFieldArrayValues]);\r\n        setFields([...updatedFieldArrayValues]);\r\n        control._updateFieldArray(name, [...updatedFieldArrayValues], (data) => data, {}, true, false);\r\n    };\r\n    React.useEffect(() => {\r\n        control._stateFlags.action = false;\r\n        isWatched(name, control._names) && control._subjects.state.next({});\r\n        if (_actioned.current &&\r\n            (!getValidationModes(control._options.mode).isOnSubmit ||\r\n                control._formState.isSubmitted)) {\r\n            if (control._options.resolver) {\r\n                control._executeSchema([name]).then((result) => {\r\n                    const error = get(result.errors, name);\r\n                    const existingError = get(control._formState.errors, name);\r\n                    if (existingError ? !error && existingError.type : error && error.type) {\r\n                        error\r\n                            ? set(control._formState.errors, name, error)\r\n                            : unset(control._formState.errors, name);\r\n                        control._subjects.state.next({\r\n                            errors: control._formState.errors,\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                const field = get(control._fields, name);\r\n                if (field && field._f) {\r\n                    validateField(field, control._formValues, control._options.criteriaMode === VALIDATION_MODE.all, control._options.shouldUseNativeValidation, true).then((error) => !isEmptyObject(error) &&\r\n                        control._subjects.state.next({\r\n                            errors: updateFieldArrayRootError(control._formState.errors, error, name),\r\n                        }));\r\n                }\r\n            }\r\n        }\r\n        control._subjects.watch.next({\r\n            name,\r\n            values: control._formValues,\r\n        });\r\n        control._names.focus &&\r\n            focusFieldBy(control._fields, (key) => !!key && key.startsWith(control._names.focus || ''));\r\n        control._names.focus = '';\r\n        control._updateValid();\r\n    }, [fields, name, control]);\r\n    React.useEffect(() => {\r\n        !get(control._formValues, name) && control._updateFieldArray(name);\r\n        return () => {\r\n            (control._options.shouldUnregister || shouldUnregister) &&\r\n                control.unregister(name);\r\n        };\r\n    }, [name, control, keyName, shouldUnregister]);\r\n    return {\r\n        swap: React.useCallback(swap, [updateValues, name, control]),\r\n        move: React.useCallback(move, [updateValues, name, control]),\r\n        prepend: React.useCallback(prepend$1, [updateValues, name, control]),\r\n        append: React.useCallback(append$1, [updateValues, name, control]),\r\n        remove: React.useCallback(remove, [updateValues, name, control]),\r\n        insert: React.useCallback(insert$1, [updateValues, name, control]),\r\n        update: React.useCallback(update, [updateValues, name, control]),\r\n        replace: React.useCallback(replace, [updateValues, name, control]),\r\n        fields: React.useMemo(() => fields.map((field, index) => ({\r\n            ...field,\r\n            [keyName]: ids.current[index] || generateId(),\r\n        })), [fields, keyName]),\r\n    };\r\n}\n\nfunction createSubject() {\r\n    let _observers = [];\r\n    const next = (value) => {\r\n        for (const observer of _observers) {\r\n            observer.next(value);\r\n        }\r\n    };\r\n    const subscribe = (observer) => {\r\n        _observers.push(observer);\r\n        return {\r\n            unsubscribe: () => {\r\n                _observers = _observers.filter((o) => o !== observer);\r\n            },\r\n        };\r\n    };\r\n    const unsubscribe = () => {\r\n        _observers = [];\r\n    };\r\n    return {\r\n        get observers() {\r\n            return _observers;\r\n        },\r\n        next,\r\n        subscribe,\r\n        unsubscribe,\r\n    };\r\n}\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepEqual(object1, object2) {\r\n    if (isPrimitive(object1) || isPrimitive(object2)) {\r\n        return object1 === object2;\r\n    }\r\n    if (isDateObject(object1) && isDateObject(object2)) {\r\n        return object1.getTime() === object2.getTime();\r\n    }\r\n    const keys1 = Object.keys(object1);\r\n    const keys2 = Object.keys(object2);\r\n    if (keys1.length !== keys2.length) {\r\n        return false;\r\n    }\r\n    for (const key of keys1) {\r\n        const val1 = object1[key];\r\n        if (!keys2.includes(key)) {\r\n            return false;\r\n        }\r\n        if (key !== 'ref') {\r\n            const val2 = object2[key];\r\n            if ((isDateObject(val1) && isDateObject(val2)) ||\r\n                (isObject(val1) && isObject(val2)) ||\r\n                (Array.isArray(val1) && Array.isArray(val2))\r\n                ? !deepEqual(val1, val2)\r\n                : val1 !== val2) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\n\nvar isMultipleSelect = (element) => element.type === `select-multiple`;\n\nvar isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nvar live = (ref) => isHTMLElement(ref) && ref.isConnected;\n\nvar objectHasFunction = (data) => {\r\n    for (const key in data) {\r\n        if (isFunction(data[key])) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\n\nfunction markFieldsDirty(data, fields = {}) {\r\n    const isParentNodeArray = Array.isArray(data);\r\n    if (isObject(data) || isParentNodeArray) {\r\n        for (const key in data) {\r\n            if (Array.isArray(data[key]) ||\r\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\r\n                fields[key] = Array.isArray(data[key]) ? [] : {};\r\n                markFieldsDirty(data[key], fields[key]);\r\n            }\r\n            else if (!isNullOrUndefined(data[key])) {\r\n                fields[key] = true;\r\n            }\r\n        }\r\n    }\r\n    return fields;\r\n}\r\nfunction getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {\r\n    const isParentNodeArray = Array.isArray(data);\r\n    if (isObject(data) || isParentNodeArray) {\r\n        for (const key in data) {\r\n            if (Array.isArray(data[key]) ||\r\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\r\n                if (isUndefined(formValues) ||\r\n                    isPrimitive(dirtyFieldsFromValues[key])) {\r\n                    dirtyFieldsFromValues[key] = Array.isArray(data[key])\r\n                        ? markFieldsDirty(data[key], [])\r\n                        : { ...markFieldsDirty(data[key]) };\r\n                }\r\n                else {\r\n                    getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);\r\n                }\r\n            }\r\n            else {\r\n                deepEqual(data[key], formValues[key])\r\n                    ? delete dirtyFieldsFromValues[key]\r\n                    : (dirtyFieldsFromValues[key] = true);\r\n            }\r\n        }\r\n    }\r\n    return dirtyFieldsFromValues;\r\n}\r\nvar getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));\n\nvar getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value)\r\n    ? value\r\n    : valueAsNumber\r\n        ? value === ''\r\n            ? NaN\r\n            : value\r\n                ? +value\r\n                : value\r\n        : valueAsDate && isString(value)\r\n            ? new Date(value)\r\n            : setValueAs\r\n                ? setValueAs(value)\r\n                : value;\n\nfunction getFieldValue(_f) {\r\n    const ref = _f.ref;\r\n    if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\r\n        return;\r\n    }\r\n    if (isFileInput(ref)) {\r\n        return ref.files;\r\n    }\r\n    if (isRadioInput(ref)) {\r\n        return getRadioValue(_f.refs).value;\r\n    }\r\n    if (isMultipleSelect(ref)) {\r\n        return [...ref.selectedOptions].map(({ value }) => value);\r\n    }\r\n    if (isCheckBoxInput(ref)) {\r\n        return getCheckboxValue(_f.refs).value;\r\n    }\r\n    return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\r\n}\n\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\r\n    const fields = {};\r\n    for (const name of fieldsNames) {\r\n        const field = get(_fields, name);\r\n        field && set(fields, name, field._f);\r\n    }\r\n    return {\r\n        criteriaMode,\r\n        names: [...fieldsNames],\r\n        fields,\r\n        shouldUseNativeValidation,\r\n    };\r\n};\n\nvar getRuleValue = (rule) => isUndefined(rule)\r\n    ? rule\r\n    : isRegex(rule)\r\n        ? rule.source\r\n        : isObject(rule)\r\n            ? isRegex(rule.value)\r\n                ? rule.value.source\r\n                : rule.value\r\n            : rule;\n\nvar hasValidation = (options) => options.mount &&\r\n    (options.required ||\r\n        options.min ||\r\n        options.max ||\r\n        options.maxLength ||\r\n        options.minLength ||\r\n        options.pattern ||\r\n        options.validate);\n\nfunction schemaErrorLookup(errors, _fields, name) {\r\n    const error = get(errors, name);\r\n    if (error || isKey(name)) {\r\n        return {\r\n            error,\r\n            name,\r\n        };\r\n    }\r\n    const names = name.split('.');\r\n    while (names.length) {\r\n        const fieldName = names.join('.');\r\n        const field = get(_fields, fieldName);\r\n        const foundError = get(errors, fieldName);\r\n        if (field && !Array.isArray(field) && name !== fieldName) {\r\n            return { name };\r\n        }\r\n        if (foundError && foundError.type) {\r\n            return {\r\n                name: fieldName,\r\n                error: foundError,\r\n            };\r\n        }\r\n        names.pop();\r\n    }\r\n    return {\r\n        name,\r\n    };\r\n}\n\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\r\n    if (mode.isOnAll) {\r\n        return false;\r\n    }\r\n    else if (!isSubmitted && mode.isOnTouch) {\r\n        return !(isTouched || isBlurEvent);\r\n    }\r\n    else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\r\n        return !isBlurEvent;\r\n    }\r\n    else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\r\n        return isBlurEvent;\r\n    }\r\n    return true;\r\n};\n\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);\n\nconst defaultOptions = {\r\n    mode: VALIDATION_MODE.onSubmit,\r\n    reValidateMode: VALIDATION_MODE.onChange,\r\n    shouldFocusError: true,\r\n};\r\nfunction createFormControl(props = {}, flushRootRender) {\r\n    let _options = {\r\n        ...defaultOptions,\r\n        ...props,\r\n    };\r\n    const shouldCaptureDirtyFields = props.resetOptions && props.resetOptions.keepDirtyValues;\r\n    let _formState = {\r\n        submitCount: 0,\r\n        isDirty: false,\r\n        isLoading: true,\r\n        isValidating: false,\r\n        isSubmitted: false,\r\n        isSubmitting: false,\r\n        isSubmitSuccessful: false,\r\n        isValid: false,\r\n        touchedFields: {},\r\n        dirtyFields: {},\r\n        errors: {},\r\n    };\r\n    let _fields = {};\r\n    let _defaultValues = isObject(_options.defaultValues)\r\n        ? cloneObject(_options.defaultValues) || {}\r\n        : {};\r\n    let _formValues = _options.shouldUnregister\r\n        ? {}\r\n        : cloneObject(_defaultValues);\r\n    let _stateFlags = {\r\n        action: false,\r\n        mount: false,\r\n        watch: false,\r\n    };\r\n    let _names = {\r\n        mount: new Set(),\r\n        unMount: new Set(),\r\n        array: new Set(),\r\n        watch: new Set(),\r\n    };\r\n    let delayErrorCallback;\r\n    let timer = 0;\r\n    const _proxyFormState = {\r\n        isDirty: false,\r\n        dirtyFields: false,\r\n        touchedFields: false,\r\n        isValidating: false,\r\n        isValid: false,\r\n        errors: false,\r\n    };\r\n    const _subjects = {\r\n        watch: createSubject(),\r\n        array: createSubject(),\r\n        state: createSubject(),\r\n    };\r\n    const validationModeBeforeSubmit = getValidationModes(_options.mode);\r\n    const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\r\n    const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\r\n    const debounce = (callback) => (wait) => {\r\n        clearTimeout(timer);\r\n        timer = window.setTimeout(callback, wait);\r\n    };\r\n    const _updateValid = async (shouldUpdateValid) => {\r\n        if (_proxyFormState.isValid || shouldUpdateValid) {\r\n            const isValid = _options.resolver\r\n                ? isEmptyObject((await _executeSchema()).errors)\r\n                : await executeBuiltInValidation(_fields, true);\r\n            if (isValid !== _formState.isValid) {\r\n                _formState.isValid = isValid;\r\n                _subjects.state.next({\r\n                    isValid,\r\n                });\r\n            }\r\n        }\r\n    };\r\n    const _updateIsValidating = (value) => _proxyFormState.isValidating &&\r\n        _subjects.state.next({\r\n            isValidating: value,\r\n        });\r\n    const _updateFieldArray = (name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {\r\n        if (args && method) {\r\n            _stateFlags.action = true;\r\n            if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\r\n                const fieldValues = method(get(_fields, name), args.argA, args.argB);\r\n                shouldSetValues && set(_fields, name, fieldValues);\r\n            }\r\n            if (shouldUpdateFieldsAndState &&\r\n                Array.isArray(get(_formState.errors, name))) {\r\n                const errors = method(get(_formState.errors, name), args.argA, args.argB);\r\n                shouldSetValues && set(_formState.errors, name, errors);\r\n                unsetEmptyArray(_formState.errors, name);\r\n            }\r\n            if (_proxyFormState.touchedFields &&\r\n                shouldUpdateFieldsAndState &&\r\n                Array.isArray(get(_formState.touchedFields, name))) {\r\n                const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\r\n                shouldSetValues && set(_formState.touchedFields, name, touchedFields);\r\n            }\r\n            if (_proxyFormState.dirtyFields) {\r\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\r\n            }\r\n            _subjects.state.next({\r\n                name,\r\n                isDirty: _getDirty(name, values),\r\n                dirtyFields: _formState.dirtyFields,\r\n                errors: _formState.errors,\r\n                isValid: _formState.isValid,\r\n            });\r\n        }\r\n        else {\r\n            set(_formValues, name, values);\r\n        }\r\n    };\r\n    const updateErrors = (name, error) => {\r\n        set(_formState.errors, name, error);\r\n        _subjects.state.next({\r\n            errors: _formState.errors,\r\n        });\r\n    };\r\n    const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {\r\n        const field = get(_fields, name);\r\n        if (field) {\r\n            const defaultValue = get(_formValues, name, isUndefined(value) ? get(_defaultValues, name) : value);\r\n            isUndefined(defaultValue) ||\r\n                (ref && ref.defaultChecked) ||\r\n                shouldSkipSetValueAs\r\n                ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f))\r\n                : setFieldValue(name, defaultValue);\r\n            _stateFlags.mount && _updateValid();\r\n        }\r\n    };\r\n    const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {\r\n        let shouldUpdateField = false;\r\n        let isPreviousDirty = false;\r\n        const output = {\r\n            name,\r\n        };\r\n        if (!isBlurEvent || shouldDirty) {\r\n            if (_proxyFormState.isDirty) {\r\n                isPreviousDirty = _formState.isDirty;\r\n                _formState.isDirty = output.isDirty = _getDirty();\r\n                shouldUpdateField = isPreviousDirty !== output.isDirty;\r\n            }\r\n            const isCurrentFieldPristine = deepEqual(get(_defaultValues, name), fieldValue);\r\n            isPreviousDirty = get(_formState.dirtyFields, name);\r\n            isCurrentFieldPristine\r\n                ? unset(_formState.dirtyFields, name)\r\n                : set(_formState.dirtyFields, name, true);\r\n            output.dirtyFields = _formState.dirtyFields;\r\n            shouldUpdateField =\r\n                shouldUpdateField ||\r\n                    (_proxyFormState.dirtyFields &&\r\n                        isPreviousDirty !== !isCurrentFieldPristine);\r\n        }\r\n        if (isBlurEvent) {\r\n            const isPreviousFieldTouched = get(_formState.touchedFields, name);\r\n            if (!isPreviousFieldTouched) {\r\n                set(_formState.touchedFields, name, isBlurEvent);\r\n                output.touchedFields = _formState.touchedFields;\r\n                shouldUpdateField =\r\n                    shouldUpdateField ||\r\n                        (_proxyFormState.touchedFields &&\r\n                            isPreviousFieldTouched !== isBlurEvent);\r\n            }\r\n        }\r\n        shouldUpdateField && shouldRender && _subjects.state.next(output);\r\n        return shouldUpdateField ? output : {};\r\n    };\r\n    const shouldRenderByError = (name, isValid, error, fieldState) => {\r\n        const previousFieldError = get(_formState.errors, name);\r\n        const shouldUpdateValid = _proxyFormState.isValid &&\r\n            isBoolean(isValid) &&\r\n            _formState.isValid !== isValid;\r\n        if (props.delayError && error) {\r\n            delayErrorCallback = debounce(() => updateErrors(name, error));\r\n            delayErrorCallback(props.delayError);\r\n        }\r\n        else {\r\n            clearTimeout(timer);\r\n            delayErrorCallback = null;\r\n            error\r\n                ? set(_formState.errors, name, error)\r\n                : unset(_formState.errors, name);\r\n        }\r\n        if ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\r\n            !isEmptyObject(fieldState) ||\r\n            shouldUpdateValid) {\r\n            const updatedFormState = {\r\n                ...fieldState,\r\n                ...(shouldUpdateValid && isBoolean(isValid) ? { isValid } : {}),\r\n                errors: _formState.errors,\r\n                name,\r\n            };\r\n            _formState = {\r\n                ..._formState,\r\n                ...updatedFormState,\r\n            };\r\n            _subjects.state.next(updatedFormState);\r\n        }\r\n        _updateIsValidating(false);\r\n    };\r\n    const _executeSchema = async (name) => await _options.resolver(_formValues, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation));\r\n    const executeSchemaAndUpdateState = async (names) => {\r\n        const { errors } = await _executeSchema();\r\n        if (names) {\r\n            for (const name of names) {\r\n                const error = get(errors, name);\r\n                error\r\n                    ? set(_formState.errors, name, error)\r\n                    : unset(_formState.errors, name);\r\n            }\r\n        }\r\n        else {\r\n            _formState.errors = errors;\r\n        }\r\n        return errors;\r\n    };\r\n    const executeBuiltInValidation = async (fields, shouldOnlyCheckValid, context = {\r\n        valid: true,\r\n    }) => {\r\n        for (const name in fields) {\r\n            const field = fields[name];\r\n            if (field) {\r\n                const { _f, ...fieldValue } = field;\r\n                if (_f) {\r\n                    const isFieldArrayRoot = _names.array.has(_f.name);\r\n                    const fieldError = await validateField(field, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation, isFieldArrayRoot);\r\n                    if (fieldError[_f.name]) {\r\n                        context.valid = false;\r\n                        if (shouldOnlyCheckValid) {\r\n                            break;\r\n                        }\r\n                    }\r\n                    !shouldOnlyCheckValid &&\r\n                        (get(fieldError, _f.name)\r\n                            ? isFieldArrayRoot\r\n                                ? updateFieldArrayRootError(_formState.errors, fieldError, _f.name)\r\n                                : set(_formState.errors, _f.name, fieldError[_f.name])\r\n                            : unset(_formState.errors, _f.name));\r\n                }\r\n                fieldValue &&\r\n                    (await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context));\r\n            }\r\n        }\r\n        return context.valid;\r\n    };\r\n    const _removeUnmounted = () => {\r\n        for (const name of _names.unMount) {\r\n            const field = get(_fields, name);\r\n            field &&\r\n                (field._f.refs\r\n                    ? field._f.refs.every((ref) => !live(ref))\r\n                    : !live(field._f.ref)) &&\r\n                unregister(name);\r\n        }\r\n        _names.unMount = new Set();\r\n    };\r\n    const _getDirty = (name, data) => (name && data && set(_formValues, name, data),\r\n        !deepEqual(getValues(), _defaultValues));\r\n    const _getWatch = (names, defaultValue, isGlobal) => generateWatchOutput(names, _names, {\r\n        ...(_stateFlags.mount\r\n            ? _formValues\r\n            : isUndefined(defaultValue)\r\n                ? _defaultValues\r\n                : isString(names)\r\n                    ? { [names]: defaultValue }\r\n                    : defaultValue),\r\n    }, isGlobal, defaultValue);\r\n    const _getFieldArray = (name) => compact(get(_stateFlags.mount ? _formValues : _defaultValues, name, props.shouldUnregister ? get(_defaultValues, name, []) : []));\r\n    const setFieldValue = (name, value, options = {}) => {\r\n        const field = get(_fields, name);\r\n        let fieldValue = value;\r\n        if (field) {\r\n            const fieldReference = field._f;\r\n            if (fieldReference) {\r\n                !fieldReference.disabled &&\r\n                    set(_formValues, name, getFieldValueAs(value, fieldReference));\r\n                fieldValue =\r\n                    isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\r\n                        ? ''\r\n                        : value;\r\n                if (isMultipleSelect(fieldReference.ref)) {\r\n                    [...fieldReference.ref.options].forEach((optionRef) => (optionRef.selected = fieldValue.includes(optionRef.value)));\r\n                }\r\n                else if (fieldReference.refs) {\r\n                    if (isCheckBoxInput(fieldReference.ref)) {\r\n                        fieldReference.refs.length > 1\r\n                            ? fieldReference.refs.forEach((checkboxRef) => (!checkboxRef.defaultChecked || !checkboxRef.disabled) &&\r\n                                (checkboxRef.checked = Array.isArray(fieldValue)\r\n                                    ? !!fieldValue.find((data) => data === checkboxRef.value)\r\n                                    : fieldValue === checkboxRef.value))\r\n                            : fieldReference.refs[0] &&\r\n                                (fieldReference.refs[0].checked = !!fieldValue);\r\n                    }\r\n                    else {\r\n                        fieldReference.refs.forEach((radioRef) => (radioRef.checked = radioRef.value === fieldValue));\r\n                    }\r\n                }\r\n                else if (isFileInput(fieldReference.ref)) {\r\n                    fieldReference.ref.value = '';\r\n                }\r\n                else {\r\n                    fieldReference.ref.value = fieldValue;\r\n                    if (!fieldReference.ref.type) {\r\n                        _subjects.watch.next({\r\n                            name,\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        (options.shouldDirty || options.shouldTouch) &&\r\n            updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);\r\n        options.shouldValidate && trigger(name);\r\n    };\r\n    const setValues = (name, value, options) => {\r\n        for (const fieldKey in value) {\r\n            const fieldValue = value[fieldKey];\r\n            const fieldName = `${name}.${fieldKey}`;\r\n            const field = get(_fields, fieldName);\r\n            (_names.array.has(name) ||\r\n                !isPrimitive(fieldValue) ||\r\n                (field && !field._f)) &&\r\n                !isDateObject(fieldValue)\r\n                ? setValues(fieldName, fieldValue, options)\r\n                : setFieldValue(fieldName, fieldValue, options);\r\n        }\r\n    };\r\n    const setValue = (name, value, options = {}) => {\r\n        const field = get(_fields, name);\r\n        const isFieldArray = _names.array.has(name);\r\n        const cloneValue = cloneObject(value);\r\n        set(_formValues, name, cloneValue);\r\n        if (isFieldArray) {\r\n            _subjects.array.next({\r\n                name,\r\n                values: _formValues,\r\n            });\r\n            if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\r\n                options.shouldDirty) {\r\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\r\n                _subjects.state.next({\r\n                    name,\r\n                    dirtyFields: _formState.dirtyFields,\r\n                    isDirty: _getDirty(name, cloneValue),\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            field && !field._f && !isNullOrUndefined(cloneValue)\r\n                ? setValues(name, cloneValue, options)\r\n                : setFieldValue(name, cloneValue, options);\r\n        }\r\n        isWatched(name, _names) && _subjects.state.next({});\r\n        _subjects.watch.next({\r\n            name,\r\n        });\r\n        !_stateFlags.mount && flushRootRender();\r\n    };\r\n    const onChange = async (event) => {\r\n        const target = event.target;\r\n        let name = target.name;\r\n        const field = get(_fields, name);\r\n        const getCurrentFieldValue = () => target.type ? getFieldValue(field._f) : getEventValue(event);\r\n        if (field) {\r\n            let error;\r\n            let isValid;\r\n            const fieldValue = getCurrentFieldValue();\r\n            const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\r\n            const shouldSkipValidation = (!hasValidation(field._f) &&\r\n                !_options.resolver &&\r\n                !get(_formState.errors, name) &&\r\n                !field._f.deps) ||\r\n                skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\r\n            const watched = isWatched(name, _names, isBlurEvent);\r\n            set(_formValues, name, fieldValue);\r\n            if (isBlurEvent) {\r\n                field._f.onBlur && field._f.onBlur(event);\r\n                delayErrorCallback && delayErrorCallback(0);\r\n            }\r\n            else if (field._f.onChange) {\r\n                field._f.onChange(event);\r\n            }\r\n            const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);\r\n            const shouldRender = !isEmptyObject(fieldState) || watched;\r\n            !isBlurEvent &&\r\n                _subjects.watch.next({\r\n                    name,\r\n                    type: event.type,\r\n                });\r\n            if (shouldSkipValidation) {\r\n                _proxyFormState.isValid && _updateValid();\r\n                return (shouldRender &&\r\n                    _subjects.state.next({ name, ...(watched ? {} : fieldState) }));\r\n            }\r\n            !isBlurEvent && watched && _subjects.state.next({});\r\n            _updateIsValidating(true);\r\n            if (_options.resolver) {\r\n                const { errors } = await _executeSchema([name]);\r\n                const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\r\n                const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\r\n                error = errorLookupResult.error;\r\n                name = errorLookupResult.name;\r\n                isValid = isEmptyObject(errors);\r\n            }\r\n            else {\r\n                error = (await validateField(field, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\r\n                if (error) {\r\n                    isValid = false;\r\n                }\r\n                else if (_proxyFormState.isValid) {\r\n                    isValid = await executeBuiltInValidation(_fields, true);\r\n                }\r\n            }\r\n            field._f.deps &&\r\n                trigger(field._f.deps);\r\n            shouldRenderByError(name, isValid, error, fieldState);\r\n        }\r\n    };\r\n    const trigger = async (name, options = {}) => {\r\n        let isValid;\r\n        let validationResult;\r\n        const fieldNames = convertToArrayPayload(name);\r\n        _updateIsValidating(true);\r\n        if (_options.resolver) {\r\n            const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\r\n            isValid = isEmptyObject(errors);\r\n            validationResult = name\r\n                ? !fieldNames.some((name) => get(errors, name))\r\n                : isValid;\r\n        }\r\n        else if (name) {\r\n            validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {\r\n                const field = get(_fields, fieldName);\r\n                return await executeBuiltInValidation(field && field._f ? { [fieldName]: field } : field);\r\n            }))).every(Boolean);\r\n            !(!validationResult && !_formState.isValid) && _updateValid();\r\n        }\r\n        else {\r\n            validationResult = isValid = await executeBuiltInValidation(_fields);\r\n        }\r\n        _subjects.state.next({\r\n            ...(!isString(name) ||\r\n                (_proxyFormState.isValid && isValid !== _formState.isValid)\r\n                ? {}\r\n                : { name }),\r\n            ...(_options.resolver || !name ? { isValid } : {}),\r\n            errors: _formState.errors,\r\n            isValidating: false,\r\n        });\r\n        options.shouldFocus &&\r\n            !validationResult &&\r\n            focusFieldBy(_fields, (key) => key && get(_formState.errors, key), name ? fieldNames : _names.mount);\r\n        return validationResult;\r\n    };\r\n    const getValues = (fieldNames) => {\r\n        const values = {\r\n            ..._defaultValues,\r\n            ...(_stateFlags.mount ? _formValues : {}),\r\n        };\r\n        return isUndefined(fieldNames)\r\n            ? values\r\n            : isString(fieldNames)\r\n                ? get(values, fieldNames)\r\n                : fieldNames.map((name) => get(values, name));\r\n    };\r\n    const getFieldState = (name, formState) => ({\r\n        invalid: !!get((formState || _formState).errors, name),\r\n        isDirty: !!get((formState || _formState).dirtyFields, name),\r\n        isTouched: !!get((formState || _formState).touchedFields, name),\r\n        error: get((formState || _formState).errors, name),\r\n    });\r\n    const clearErrors = (name) => {\r\n        name\r\n            ? convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName))\r\n            : (_formState.errors = {});\r\n        _subjects.state.next({\r\n            errors: _formState.errors,\r\n        });\r\n    };\r\n    const setError = (name, error, options) => {\r\n        const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\r\n        set(_formState.errors, name, {\r\n            ...error,\r\n            ref,\r\n        });\r\n        _subjects.state.next({\r\n            name,\r\n            errors: _formState.errors,\r\n            isValid: false,\r\n        });\r\n        options && options.shouldFocus && ref && ref.focus && ref.focus();\r\n    };\r\n    const watch = (name, defaultValue) => isFunction(name)\r\n        ? _subjects.watch.subscribe({\r\n            next: (payload) => name(_getWatch(undefined, defaultValue), payload),\r\n        })\r\n        : _getWatch(name, defaultValue, true);\r\n    const unregister = (name, options = {}) => {\r\n        for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\r\n            _names.mount.delete(fieldName);\r\n            _names.array.delete(fieldName);\r\n            if (get(_fields, fieldName)) {\r\n                if (!options.keepValue) {\r\n                    unset(_fields, fieldName);\r\n                    unset(_formValues, fieldName);\r\n                }\r\n                !options.keepError && unset(_formState.errors, fieldName);\r\n                !options.keepDirty && unset(_formState.dirtyFields, fieldName);\r\n                !options.keepTouched && unset(_formState.touchedFields, fieldName);\r\n                !_options.shouldUnregister &&\r\n                    !options.keepDefaultValue &&\r\n                    unset(_defaultValues, fieldName);\r\n            }\r\n        }\r\n        _subjects.watch.next({});\r\n        _subjects.state.next({\r\n            ..._formState,\r\n            ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\r\n        });\r\n        !options.keepIsValid && _updateValid();\r\n    };\r\n    const register = (name, options = {}) => {\r\n        let field = get(_fields, name);\r\n        const disabledIsDefined = isBoolean(options.disabled);\r\n        set(_fields, name, {\r\n            ...(field || {}),\r\n            _f: {\r\n                ...(field && field._f ? field._f : { ref: { name } }),\r\n                name,\r\n                mount: true,\r\n                ...options,\r\n            },\r\n        });\r\n        _names.mount.add(name);\r\n        field\r\n            ? disabledIsDefined &&\r\n                set(_formValues, name, options.disabled\r\n                    ? undefined\r\n                    : get(_formValues, name, getFieldValue(field._f)))\r\n            : updateValidAndValue(name, true, options.value);\r\n        return {\r\n            ...(disabledIsDefined ? { disabled: options.disabled } : {}),\r\n            ...(_options.shouldUseNativeValidation\r\n                ? {\r\n                    required: !!options.required,\r\n                    min: getRuleValue(options.min),\r\n                    max: getRuleValue(options.max),\r\n                    minLength: getRuleValue(options.minLength),\r\n                    maxLength: getRuleValue(options.maxLength),\r\n                    pattern: getRuleValue(options.pattern),\r\n                }\r\n                : {}),\r\n            name,\r\n            onChange,\r\n            onBlur: onChange,\r\n            ref: (ref) => {\r\n                if (ref) {\r\n                    register(name, options);\r\n                    field = get(_fields, name);\r\n                    const fieldRef = isUndefined(ref.value)\r\n                        ? ref.querySelectorAll\r\n                            ? ref.querySelectorAll('input,select,textarea')[0] || ref\r\n                            : ref\r\n                        : ref;\r\n                    const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\r\n                    const refs = field._f.refs || [];\r\n                    if (radioOrCheckbox\r\n                        ? refs.find((option) => option === fieldRef)\r\n                        : fieldRef === field._f.ref) {\r\n                        return;\r\n                    }\r\n                    set(_fields, name, {\r\n                        _f: {\r\n                            ...field._f,\r\n                            ...(radioOrCheckbox\r\n                                ? {\r\n                                    refs: [\r\n                                        ...refs.filter(live),\r\n                                        fieldRef,\r\n                                        ...(Array.isArray(get(_defaultValues, name)) ? [{}] : []),\r\n                                    ],\r\n                                    ref: { type: fieldRef.type, name },\r\n                                }\r\n                                : { ref: fieldRef }),\r\n                        },\r\n                    });\r\n                    updateValidAndValue(name, false, undefined, fieldRef);\r\n                }\r\n                else {\r\n                    field = get(_fields, name, {});\r\n                    if (field._f) {\r\n                        field._f.mount = false;\r\n                    }\r\n                    (_options.shouldUnregister || options.shouldUnregister) &&\r\n                        !(isNameInFieldArray(_names.array, name) && _stateFlags.action) &&\r\n                        _names.unMount.add(name);\r\n                }\r\n            },\r\n        };\r\n    };\r\n    const _focusError = () => _options.shouldFocusError &&\r\n        focusFieldBy(_fields, (key) => key && get(_formState.errors, key), _names.mount);\r\n    const handleSubmit = (onValid, onInvalid) => async (e) => {\r\n        if (e) {\r\n            e.preventDefault && e.preventDefault();\r\n            e.persist && e.persist();\r\n        }\r\n        let fieldValues = cloneObject(_formValues);\r\n        _subjects.state.next({\r\n            isSubmitting: true,\r\n        });\r\n        if (_options.resolver) {\r\n            const { errors, values } = await _executeSchema();\r\n            _formState.errors = errors;\r\n            fieldValues = values;\r\n        }\r\n        else {\r\n            await executeBuiltInValidation(_fields);\r\n        }\r\n        if (isEmptyObject(_formState.errors)) {\r\n            _subjects.state.next({\r\n                errors: {},\r\n            });\r\n            await onValid(fieldValues, e);\r\n        }\r\n        else {\r\n            if (onInvalid) {\r\n                await onInvalid({ ..._formState.errors }, e);\r\n            }\r\n            _focusError();\r\n        }\r\n        _subjects.state.next({\r\n            isSubmitted: true,\r\n            isSubmitting: false,\r\n            isSubmitSuccessful: isEmptyObject(_formState.errors),\r\n            submitCount: _formState.submitCount + 1,\r\n            errors: _formState.errors,\r\n        });\r\n    };\r\n    const resetField = (name, options = {}) => {\r\n        if (get(_fields, name)) {\r\n            if (isUndefined(options.defaultValue)) {\r\n                setValue(name, get(_defaultValues, name));\r\n            }\r\n            else {\r\n                setValue(name, options.defaultValue);\r\n                set(_defaultValues, name, options.defaultValue);\r\n            }\r\n            if (!options.keepTouched) {\r\n                unset(_formState.touchedFields, name);\r\n            }\r\n            if (!options.keepDirty) {\r\n                unset(_formState.dirtyFields, name);\r\n                _formState.isDirty = options.defaultValue\r\n                    ? _getDirty(name, get(_defaultValues, name))\r\n                    : _getDirty();\r\n            }\r\n            if (!options.keepError) {\r\n                unset(_formState.errors, name);\r\n                _proxyFormState.isValid && _updateValid();\r\n            }\r\n            _subjects.state.next({ ..._formState });\r\n        }\r\n    };\r\n    const _reset = (formValues, keepStateOptions = {}) => {\r\n        const updatedValues = formValues || _defaultValues;\r\n        const cloneUpdatedValues = cloneObject(updatedValues);\r\n        const values = formValues && !isEmptyObject(formValues)\r\n            ? cloneUpdatedValues\r\n            : _defaultValues;\r\n        if (!keepStateOptions.keepDefaultValues) {\r\n            _defaultValues = updatedValues;\r\n        }\r\n        if (!keepStateOptions.keepValues) {\r\n            if (keepStateOptions.keepDirtyValues || shouldCaptureDirtyFields) {\r\n                for (const fieldName of _names.mount) {\r\n                    get(_formState.dirtyFields, fieldName)\r\n                        ? set(values, fieldName, get(_formValues, fieldName))\r\n                        : setValue(fieldName, get(values, fieldName));\r\n                }\r\n            }\r\n            else {\r\n                if (isWeb && isUndefined(formValues)) {\r\n                    for (const name of _names.mount) {\r\n                        const field = get(_fields, name);\r\n                        if (field && field._f) {\r\n                            const fieldReference = Array.isArray(field._f.refs)\r\n                                ? field._f.refs[0]\r\n                                : field._f.ref;\r\n                            if (isHTMLElement(fieldReference)) {\r\n                                const form = fieldReference.closest('form');\r\n                                if (form) {\r\n                                    form.reset();\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                _fields = {};\r\n            }\r\n            _formValues = props.shouldUnregister\r\n                ? keepStateOptions.keepDefaultValues\r\n                    ? cloneObject(_defaultValues)\r\n                    : {}\r\n                : cloneUpdatedValues;\r\n            _subjects.array.next({\r\n                values,\r\n            });\r\n            _subjects.watch.next({\r\n                values,\r\n            });\r\n        }\r\n        _names = {\r\n            mount: new Set(),\r\n            unMount: new Set(),\r\n            array: new Set(),\r\n            watch: new Set(),\r\n            watchAll: false,\r\n            focus: '',\r\n        };\r\n        !_stateFlags.mount && flushRootRender();\r\n        _stateFlags.mount =\r\n            !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\r\n        _stateFlags.watch = !!props.shouldUnregister;\r\n        _subjects.state.next({\r\n            submitCount: keepStateOptions.keepSubmitCount\r\n                ? _formState.submitCount\r\n                : 0,\r\n            isDirty: keepStateOptions.keepDirty || keepStateOptions.keepDirtyValues\r\n                ? _formState.isDirty\r\n                : !!(keepStateOptions.keepDefaultValues &&\r\n                    !deepEqual(formValues, _defaultValues)),\r\n            isSubmitted: keepStateOptions.keepIsSubmitted\r\n                ? _formState.isSubmitted\r\n                : false,\r\n            dirtyFields: keepStateOptions.keepDirty || keepStateOptions.keepDirtyValues\r\n                ? _formState.dirtyFields\r\n                : keepStateOptions.keepDefaultValues && formValues\r\n                    ? getDirtyFields(_defaultValues, formValues)\r\n                    : {},\r\n            touchedFields: keepStateOptions.keepTouched\r\n                ? _formState.touchedFields\r\n                : {},\r\n            errors: keepStateOptions.keepErrors ? _formState.errors : {},\r\n            isSubmitting: false,\r\n            isSubmitSuccessful: false,\r\n        });\r\n    };\r\n    const reset = (formValues, keepStateOptions) => _reset(isFunction(formValues)\r\n        ? formValues(_formValues)\r\n        : formValues, keepStateOptions);\r\n    const setFocus = (name, options = {}) => {\r\n        const field = get(_fields, name);\r\n        const fieldReference = field && field._f;\r\n        if (fieldReference) {\r\n            const fieldRef = fieldReference.refs\r\n                ? fieldReference.refs[0]\r\n                : fieldReference.ref;\r\n            if (fieldRef.focus) {\r\n                fieldRef.focus();\r\n                options.shouldSelect && fieldRef.select();\r\n            }\r\n        }\r\n    };\r\n    const _updateFormState = (updatedFormState) => {\r\n        _formState = {\r\n            ..._formState,\r\n            ...updatedFormState,\r\n        };\r\n    };\r\n    if (isFunction(_options.defaultValues)) {\r\n        _options.defaultValues().then((values) => {\r\n            reset(values, _options.resetOptions);\r\n            _subjects.state.next({\r\n                isLoading: false,\r\n            });\r\n        });\r\n    }\r\n    return {\r\n        control: {\r\n            register,\r\n            unregister,\r\n            getFieldState,\r\n            _executeSchema,\r\n            _focusError,\r\n            _getWatch,\r\n            _getDirty,\r\n            _updateValid,\r\n            _removeUnmounted,\r\n            _updateFieldArray,\r\n            _getFieldArray,\r\n            _reset,\r\n            _updateFormState,\r\n            _subjects,\r\n            _proxyFormState,\r\n            get _fields() {\r\n                return _fields;\r\n            },\r\n            get _formValues() {\r\n                return _formValues;\r\n            },\r\n            get _stateFlags() {\r\n                return _stateFlags;\r\n            },\r\n            set _stateFlags(value) {\r\n                _stateFlags = value;\r\n            },\r\n            get _defaultValues() {\r\n                return _defaultValues;\r\n            },\r\n            get _names() {\r\n                return _names;\r\n            },\r\n            set _names(value) {\r\n                _names = value;\r\n            },\r\n            get _formState() {\r\n                return _formState;\r\n            },\r\n            set _formState(value) {\r\n                _formState = value;\r\n            },\r\n            get _options() {\r\n                return _options;\r\n            },\r\n            set _options(value) {\r\n                _options = {\r\n                    ..._options,\r\n                    ...value,\r\n                };\r\n            },\r\n        },\r\n        trigger,\r\n        register,\r\n        handleSubmit,\r\n        watch,\r\n        setValue,\r\n        getValues,\r\n        reset,\r\n        resetField,\r\n        clearErrors,\r\n        unregister,\r\n        setError,\r\n        setFocus,\r\n        getFieldState,\r\n    };\r\n}\n\n/**\r\n * Custom hook to manage the entire form.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\r\n *\r\n * @param props - form configuration and validation parameters.\r\n *\r\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\r\n *   const onSubmit = data => console.log(data);\r\n *\r\n *   console.log(watch(\"example\"));\r\n *\r\n *   return (\r\n *     <form onSubmit={handleSubmit(onSubmit)}>\r\n *       <input defaultValue=\"test\" {...register(\"example\")} />\r\n *       <input {...register(\"exampleRequired\", { required: true })} />\r\n *       {errors.exampleRequired && <span>This field is required</span>}\r\n *       <input type=\"submit\" />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useForm(props = {}) {\r\n    const _formControl = React.useRef();\r\n    const [formState, updateFormState] = React.useState({\r\n        isDirty: false,\r\n        isValidating: false,\r\n        isLoading: true,\r\n        isSubmitted: false,\r\n        isSubmitting: false,\r\n        isSubmitSuccessful: false,\r\n        isValid: false,\r\n        submitCount: 0,\r\n        dirtyFields: {},\r\n        touchedFields: {},\r\n        errors: {},\r\n        defaultValues: isFunction(props.defaultValues)\r\n            ? undefined\r\n            : props.defaultValues,\r\n    });\r\n    if (!_formControl.current) {\r\n        _formControl.current = {\r\n            ...createFormControl(props, () => updateFormState((formState) => ({ ...formState }))),\r\n            formState,\r\n        };\r\n    }\r\n    const control = _formControl.current.control;\r\n    control._options = props;\r\n    useSubscribe({\r\n        subject: control._subjects.state,\r\n        next: (value) => {\r\n            if (shouldRenderFormState(value, control._proxyFormState, control._updateFormState, true)) {\r\n                updateFormState({ ...control._formState });\r\n            }\r\n        },\r\n    });\r\n    React.useEffect(() => {\r\n        if (!control._stateFlags.mount) {\r\n            control._updateValid();\r\n            control._stateFlags.mount = true;\r\n        }\r\n        if (control._stateFlags.watch) {\r\n            control._stateFlags.watch = false;\r\n            control._subjects.state.next({});\r\n        }\r\n        control._removeUnmounted();\r\n    });\r\n    React.useEffect(() => {\r\n        if (props.values && !deepEqual(props.values, control._defaultValues)) {\r\n            control._reset(props.values, control._options.resetOptions);\r\n        }\r\n    }, [props.values, control]);\r\n    React.useEffect(() => {\r\n        formState.submitCount && control._focusError();\r\n    }, [control, formState.submitCount]);\r\n    _formControl.current.formState = getProxyFormState(formState, control);\r\n    return _formControl.current;\r\n}\n\nexport { Controller, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };\n//# sourceMappingURL=index.esm.mjs.map\n","export const endpoint = process.env.GATSBY_HUBSPOT_URL || '';\r\n","import React from \"react\";\r\nimport { useForm } from 'react-hook-form';\r\nimport * as config from '../config';\r\n\r\ntype FormValues = {\r\n  email: string;\r\n};\r\n\r\nconst Form: React.FC = () => {\r\n  const [message, setMessage] = React.useState('');\r\n  const { register, handleSubmit } = useForm<FormValues>();\r\n  \r\n  const onSubmit = async (input: FormValues) => {\r\n    fetch(config.hubspot.endpoint, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\", },\r\n      body: JSON.stringify({ fields: [{ name: \"email\", value: input.email }], }),\r\n    }).then((response) => {\r\n      if (!response.ok) {\r\n        throw new Error();\r\n      }\r\n      setMessage(\"登録ありがとうございました。\");\r\n    }).catch(() => {\r\n      setMessage(\"登録に失敗しました。\");\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div id=\"form\" className=\"flex flex-col justify-center items-center mx-2 mt-32 p-8 bg-white rounded-lg shadow-lg\">\r\n      <div className=\"text-lg font-bold\">メールアドレスを登録</div>\r\n      <div className=\"text-base mt-4\">メールアドレスをご登録頂いた方に、最新情報をお届けします。</div>\r\n      {\r\n        message ? (\r\n          <div className=\"flex flex-col justify-center items-center\">\r\n            <div className=\"mt-4 px-4 py-2 border border-transparent text-base text-pink-400  font-bold\">{ message }</div>\r\n            <button onClick={() => setMessage('')} className=\"mt-4 px-8 py-2 text-lg text-white font-bold rounded-full bg-pink-500 hover:bg-pink-400\">もう一度登録する</button>\r\n          </div>\r\n        ):(\r\n          <form className=\"flex flex-col justify-center items-center w-full\" onSubmit={handleSubmit(onSubmit)}>\r\n            <input\r\n              className=\"max-w-[384px] w-full mt-4 px-4 py-2 border text-base\"\r\n              type=\"email\"\r\n              {...register(\"email\")}\r\n              placeholder=\"メールアドレス入力\"\r\n              required\r\n            />\r\n            <button id=\"ctaButtonSubmit\" type=\"submit\" className=\"mt-4 px-8 py-2 text-lg text-white font-bold rounded-full bg-pink-500 hover:bg-pink-400\">無料先行登録</button>\r\n          </form>\r\n        )\r\n      }\r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Form;","import React from \"react\";\r\n\r\ninterface Props {\r\n  title: string;\r\n}\r\n\r\nconst Header: React.FC<Props> = ({title}) => {\r\n  return (\r\n    <div className=\"flex flex-row items-center h-16 mx-2\">\r\n      <div className=\"text-2xl font-bold\">{title}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\ninterface Props {\r\n  headline: string;\r\n  sentence: string;\r\n  image: string;\r\n}\r\n\r\nconst Hero: React.FC<Props> = ({headline, sentence, image}) => {\r\n  const handleScrollToForm = () => {\r\n    const contact = document.getElementById('form');\r\n    if (contact) {\r\n      contact.scrollIntoView({ behavior: 'smooth' });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-row flex-wrap mt-12\">\r\n      <div className=\"flex flex-col flex-1 min-w-[320px]  mx-2 my-2\">\r\n        <div className=\"text-5xl font-bold\">{headline}</div>\r\n        <div className=\"text-lg mt-8\">{sentence}</div>\r\n        <div className=\"flex justify-center items-center w-full h-full\">\r\n          <button id=\"ctaButtonScroll\" onClick={ handleScrollToForm } className=\"my-8 px-8 py-2 text-lg text-white font-bold rounded-full bg-pink-500 hover:bg-pink-400\">無料先行登録</button>\r\n        </div>\r\n      </div>\r\n      <div className=\"flex flex-col flex-1 justify-center items-center min-w-[320px] mx-2 my-2\">\r\n        <img src={image} className=\"object-contain h-full w-full max-h-64 p-4 bg-gray-100\"/>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Hero;","export default __webpack_public_path__ + \"static/screenshot1-3325a16fe82d19fcaaece9f912f3bb18.png\";","export default __webpack_public_path__ + \"static/screenshot2-3f68cea24b9bd236a7adbcb7111522bc.png\";","import React from \"react\";\r\nimport screenshot1Image from '../images/screenshot1.png';\r\nimport screenshot2Image from '../images/screenshot2.png';\r\n\r\nconst Screenshot: React.FC = () => {\r\n\r\n  return (\r\n\r\n    <div className=\"flex flex-col mt-32 \">\r\n      <div className=\"text-lg font-bold mx-2\">画面イメージ</div>\r\n      <div className=\"text-base mt-4 mx-2\">kintoneの機能を使うことで、データの一覧表示やグラフ表示が可能です。</div>\r\n      <div className=\"flex flex-row flex-wrap \">\r\n        <div className=\"flex flex-col flex-1 justify-center items-center min-w-[320px] mx-2 mt-4\">\r\n          <img src={screenshot1Image} className=\"object-contain h-full w-full p-4 bg-white\"/>\r\n        </div>\r\n        <div className=\"flex flex-col flex-1 justify-center items-center min-w-[320px] mx-2 mt-4\">\r\n          <img src={screenshot2Image} className=\"object-contain h-full w-full p-4 bg-white\"/>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n  );\r\n};\r\n\r\nexport default Screenshot;","export default __webpack_public_path__ + \"static/hero-e127c5b3a4d28a506d2cd014c9462757.png\";","export default __webpack_public_path__ + \"static/feature1-20cca2d2f1336c6cca5025468336f7fc.png\";","export default __webpack_public_path__ + \"static/feature2-b70010af7e94dca520c09ad384d2de28.png\";","export default __webpack_public_path__ + \"static/feature3-95ec483cd3c8e6de840d310415744fd3.png\";","import * as React from \"react\"\r\nimport type { HeadFC, PageProps } from \"gatsby\"\r\nimport { Feature, Footer, Form, Header, Hero, Screenshot } from \"../components\"\r\nimport heroImage from '../images/hero.png';\r\nimport feature1Image from '../images/feature1.png';\r\nimport feature2Image from '../images/feature2.png';\r\nimport feature3Image from '../images/feature3.png';\r\n\r\nconst IndexPage: React.FC<PageProps> = () => {\r\n\r\n  const headerTitle = \"スマート在庫管理 on kintone\";\r\n  const heroHeadLine = \"IoTでkintoneをもっと便利に。在庫管理を自動化。\";\r\n  const heroSentence = \"IoT重量計とkintoneをつないで、在庫管理を自動化します。在庫量の変化がリアルタイムでkintoneアプリに入力されます。\";\r\n  const feature1Headline = \"在庫量の変化を自動で入力\";\r\n  const feature1Sentence = \"IoT重量計が在庫量の変化を検知して、kintoneに自動で入力を行います。1グラムの変化を検知することができます。\";\r\n  const feature2Headline = \"好きなアプリと組み合わせて使える\";\r\n  const feature2Sentence = \"在庫管理用のkintoneアプリは、お客様が自由に作成、編集することができます。\";\r\n  const feature3Headline = \"かんたんに導入できる\";\r\n  const feature3Sentence = \"kintoneアプリにプラグインを読み込むだけで、かんたんに機能を導入することができます。\";\r\n\r\n  return (\r\n    <div className=\"flex justify-center mx-2 bg-gray-50\">\r\n      <div className=\"flex flex-col w-full max-w-7xl\">\r\n        <header>\r\n          <Header title={headerTitle}/>\r\n        </header>\r\n        <main>\r\n          <Hero headline={heroHeadLine} sentence={heroSentence} image={heroImage}/>\r\n          <div className=\"flex flex-row flex-wrap mt-32\">\r\n            <Feature headline={feature1Headline} sentence={feature1Sentence} image={feature1Image}/>\r\n            <Feature headline={feature2Headline} sentence={feature2Sentence} image={feature2Image}/>\r\n            <Feature headline={feature3Headline} sentence={feature3Sentence} image={feature3Image}/>\r\n          </div>\r\n          <Screenshot/>\r\n          <Form/>\r\n        </main>\r\n        <footer>\r\n          <Footer/>\r\n        </footer>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default IndexPage\r\n\r\nexport const Head: HeadFC = () => <title>スマート在庫管理 on kintone</title>"],"names":["_ref","headline","sentence","image","React","className","src","isCheckBoxInput","element","type","isDateObject","value","Date","isNullOrUndefined","isObjectType","isObject","Array","isArray","getEventValue","event","target","checked","isNameInFieldArray","names","name","has","substring","search","getNodeParentName","compact","filter","Boolean","isUndefined","val","undefined","get","obj","path","defaultValue","result","split","reduce","key","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","getProxyFormState","formState","control","localProxyFormState","isRoot","defaultValues","_defaultValues","Object","defineProperty","_key","_proxyFormState","isEmptyObject","keys","length","shouldRenderFormState","formStateData","updateFormState","find","convertToArrayPayload","useSubscribe","props","_props","current","subscription","disabled","subject","subscribe","next","unsubscribe","isString","generateWatchOutput","_names","formValues","isGlobal","watch","add","map","fieldName","watchAll","isWeb","window","HTMLElement","document","cloneObject","data","copy","Set","Blob","FileList","tempObject","prototypeCopy","constructor","prototype","hasOwnProperty","isPlainObject","appendErrors","validateAllFieldCriteria","errors","message","types","isKey","test","stringToPath","input","replace","set","object","index","tempPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","callback","fieldsNames","field","_f","currentField","ref","focus","refs","getValidationModes","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","isWatched","isBlurEvent","some","watchName","startsWith","slice","updateFieldArrayRootError","error","fieldArrayErrors","isBoolean","isFileInput","isFunction","isHTMLElement","owner","ownerDocument","defaultView","isMessage","isRadioInput","isRegex","RegExp","defaultResult","isValid","validResult","getCheckboxValue","options","values","option","attributes","defaultReturn","getRadioValue","previous","getValidateError","every","getValueAndMessage","validationData","validateField","async","shouldUseNativeValidation","isFieldArray","required","maxLength","minLength","min","max","pattern","validate","valueAsNumber","mount","inputValue","inputRef","setCustomValidity","reportValidity","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueDate","valueAsDate","convertTimeToDate","time","toDateString","isTime","isWeek","valueNumber","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","unset","paths","childObject","updatePath","baseGet","isEmptyArray","createSubject","_observers","observers","observer","push","o","isPrimitive","deepEqual","object1","object2","getTime","keys1","keys2","val1","includes","val2","isMultipleSelect","live","isConnected","objectHasFunction","markFieldsDirty","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","getDirtyFields","getFieldValueAs","setValueAs","NaN","getFieldValue","files","selectedOptions","getRuleValue","rule","source","schemaErrorLookup","_fields","join","foundError","pop","defaultOptions","reValidateMode","shouldFocusError","createFormControl","flushRootRender","_options","shouldCaptureDirtyFields","resetOptions","keepDirtyValues","delayErrorCallback","_formState","submitCount","isDirty","isLoading","isValidating","isSubmitted","isSubmitting","isSubmitSuccessful","touchedFields","dirtyFields","_formValues","shouldUnregister","_stateFlags","action","unMount","array","timer","_subjects","state","validationModeBeforeSubmit","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","criteriaMode","_updateValid","shouldUpdateValid","resolver","_executeSchema","executeBuiltInValidation","_updateIsValidating","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","shouldUpdateField","isPreviousDirty","output","_getDirty","isCurrentFieldPristine","isPreviousFieldTouched","shouldRenderByError","fieldState","previousFieldError","delayError","updateErrors","wait","clearTimeout","setTimeout","updatedFormState","context","getResolverOptions","shouldOnlyCheckValid","valid","isFieldArrayRoot","fieldError","getValues","_getWatch","fieldReference","forEach","optionRef","selected","checkboxRef","radioRef","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","cloneValue","onChange","shouldSkipValidation","deps","isTouched","skipValidation","watched","onBlur","previousErrorLookupResult","errorLookupResult","fieldNames","executeSchemaAndUpdateState","Promise","all","shouldFocus","getFieldState","invalid","unregister","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","register","disabledIsDefined","fieldRef","querySelectorAll","radioOrCheckbox","_focusError","_reset","keepStateOptions","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","form","closest","reset","keepSubmitCount","keepIsSubmitted","keepErrors","then","_removeUnmounted","_updateFieldArray","method","args","shouldSetValues","shouldUpdateFieldsAndState","fieldValues","argA","argB","unsetEmptyArray","_getFieldArray","_updateFormState","handleSubmit","onValid","onInvalid","e","preventDefault","persist","payload","resetField","clearErrors","inputName","setError","setFocus","shouldSelect","select","endpoint","process","GATSBY_HUBSPOT_URL","setMessage","_formControl","useForm","id","onClick","onSubmit","fetch","config","headers","body","JSON","stringify","email","response","ok","Error","catch","placeholder","title","contact","getElementById","scrollIntoView","behavior","screenshot1Image","screenshot2Image","Header","Hero","heroImage","Feature","feature1Image","feature2Image","feature3Image","Screenshot","Form","Footer","Head"],"sourceRoot":""}